#!/bin/bash

# $1 => zookeeper host[s]
# $2 => timeout in seconds, default = 60s

service_name="kafka"
timeout_max_seconds=${2:-60}
delay=2

function print-usage {
  echo "Usage: wait-for-${service_name}.sh <zookeeper-host>:<port>[,<zookeeper-host-2>:<port>,...] [timeout] [-exec <command>]"
}

start_time=$(date +%s)
let timeout=$start_time+$timeout_max_seconds

IFS=, read -a services <<< $1
if [ ${#services[@]} -lt 1 ]; then
  print-usage
  exit 1
fi

service="${services[0]}"

IFS=: read server port <<< $service
if [ -z "$server" ] || [ -z "$port" ]; then
  print-usage
  exit 2
fi

wait-for-zookeeper.sh $service $timeout_max_seconds
if [ "$?" -ne 0 ]; then
  echo "Kafka requires zookeeper, but zookeeper cannot be reached. Exiting."
  exit 3
fi

echo "Waiting for ${service_name} at: $service"

function test_service {
  regex='^-?[0-9]+([.][0-9]+)?$'
  broker_count=$(echo "ls /brokers/ids" | $CONFLUENT_HOME/bin/zookeeper-shell $service 2> /dev/null | tail -n 1 | jq length 2> /dev/null)
  if [[ "$broker_count" =~ $regex ]] && [ "$broker_count" -gt "0" ]; then
    return 0 # success
  else
    return 1 # failure
  fi
}

function poll {
  if test_service; then
    echo "$(date) -- Found $service_name"
  else
    if [ "$timeout" -le "$(date +%s)" ]; then
      echo "Didn't find $service_name within $timeout_max_seconds seconds. Exiting."
      exit 4
    fi

    echo "$(date) -- Didn't find ${service_name}. Sleeping for $delay sec."
    sleep $delay

    poll
  fi
}

poll

# Execute followup command
execute $@
